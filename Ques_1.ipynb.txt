{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Getting Started with Pandas\n",
    "# Objective: Introduce students to using Pandas for data analysis by loading data into Pandas\n",
    "# DataFrames.\n",
    "\n",
    "# Question 1: Importing Pandas and Loading a CSV File\n",
    "# 1. Open your Jupyter Notebook or a Python environment.\n",
    "# 2. Import the pandas library.\n",
    "# 3. Load a CSV file into a DataFrame.\n",
          try:
             df = pd.read_csv('your_data.csv')
          except FileNotFoundError:
             print("Error: 'your_data.csv' not found. Please make sure the file is in the correct directory or provide the full path.")
             df = None
 
    "# Question 2: Displaying the First Few Rows\n",
    "# 4. Use the head() method to display the first five rows of the DataFrame.\n",
          if df is not None:
            print("First 5 rows of the DataFrame:")
            print(df.head())

    "# Question 3: Basic Data Information\n",
    "# 5. Use the info() method to get a concise summary of the DataFrame.\n",
          if df is not None:
             print("DataFrame Information:")
             df.info()
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Data Inspection & Selection\n",
    "# Objective: Learn how to inspect data and select specific data points.\n",
    "\n",
    "# Question 1: Inspecting Column Data Types\n",
    "# 6. Use the dtypes attribute to inspect the data types of each column.\n",
          if df is not None:
             print("Column Data Types:")
             print(df.dtypes)
    "# Question 2: Selecting Columns\n",
    "# 7. Select a single column from the DataFrame.\n",
          if df is not None:
             selected_column = df['column_name']
             print("Selected Column:")
             print(selected_column.head()) 
    
    "# Question 3: Slicing Rows\n",
    "# 8. Select specific rows using slicing.\n",
          if df is not None:
             first_three_rows = df[0:3]
             print("First 3 Rows:")
             print(first_three_rows)
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Data Cleaning & Manipulation\n",
    "# Objective: Practice cleaning data and manipulating DataFrames.\n",
    "\n",
    "# Question 1: Handling Missing Values\n",
    "# 9. Use the fillna() method to fill missing values with a specific value.\n",
          if df is not None:
             df_filled = df.fillna(0)
             print("DataFrame with Missing Values Filled (with 0):")
             print(df_filled.head())
    "# QUestion 2: Renaming Columns\n",
    "# 10. Change the names of specific columns using rename().\n",
           if df is not None:
              df_renamed = df.rename(columns={'old_name': 'new_name'})
              print("DataFrame with Renamed Columns:")
              print(df_renamed.head())
    "# Question 3: Dropping Duplicates\n",
    "# 11. Remove duplicate rows from the DataFrame.\n",
           if df is not None:
              df_dropped_duplicates = df.drop_duplicates()
              print("DataFrame with Duplicate Rows Dropped:")
              print(df_dropped_duplicates.head())
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Data Aggregation & Exporting\n",
    "# Objective: Aggregate data and export the results.\n",
    "\n",
    "# Question 1: Grouping and Aggregating Data\n",
    "# 12. Group data by a specific column and calculate the mean for each group.\n",
         if df is not None:
            try:
                grouped_data_mean = df.groupby('grouping_column')['numerical_column'].mean()
                print("Mean of 'numerical_column' grouped by 'grouping_column':")
                print(grouped_data_mean)
            except KeyError as e:
                print(f"Error: Column '{e}' not found in the DataFrame for grouping.")
    "# Question 2: Exporting Data to CSV\n",
    "# 13. Export the DataFrame to a new CSV file.\n",
           if df is not None:
              df.to_csv('output.csv', index=False)
              print("DataFrame exported to 'output.csv'")
    "# Question 3: Aggregating with Multiple Functions\n",
    "# 14. Apply several aggregate functions to the grouped data.\n",
           if df is not None:
              try:
                  grouped_data_agg = df.groupby('grouping_column')['numerical_column'].agg(['mean', 'sum', 'count'])
                  print("Aggregated data (mean, sum, count) grouped by 'grouping_column':")
                  print(grouped_data_agg)
              except KeyError as e:
                  print(f"Error: Column '{e}' not found in the DataFrame for aggregation.")
   ]
  }
 ],
 "metadata": {
  "language_info": {
   "name": "python"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
